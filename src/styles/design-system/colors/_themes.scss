@use './palette';
$light-theme: light-theme;

$colors: (
  light-theme: (
    background: (
      brand-main: palette.$colors-primary-normal,
      brand-main-hover: palette.$colors-primary-dark,
      brand-main-on-light-hover: palette.$colors-primary-extra-light,
      brand-main-active: palette.$colors-primary-darker,
      brand-main-on-light-active: palette.$colors-primary-lighter,
      brand-main-focus: palette.$colors-primary-darker,

      brand-secondary: palette.$colors-secondary-normal,
      brand-secondary-hover: palette.$colors-secondary-darker,
      brand-secondary-focus: palette.$colors-secondary-darker,
    ),
    text: (
      light-on-brand-main: palette.$colors-white,
      brand-on-light-main: palette.$colors-primary-dark,
      brand-on-light-main-hover: palette.$colors-primary-darker,
    ),
  ),
  dark-theme: (),
) !default;

/// Returns the color value for a given color category, color value and theme mode.
///
/// @param {String} $category - Color's category.
/// @param {String} $color - Color's value.
/// @param {String} $theme - Theme's value, light by default.
/// @return {Color} The color value.

@function select-color($category, $color, $theme: $light-theme) {
  $fetched-color: map-get(map-get(map-get($colors, $theme), $category), $color);

  @if $fetched-color == null {
    @error 'Color `#{$color}` not found. Available colors: #{$colors}';
  } @else {
    @return $fetched-color;
  }
}

@mixin light-theme {
  .light-theme {
    @content;
  }
}

@mixin dark-theme {
  .dark-theme {
    @content;
  }
}
