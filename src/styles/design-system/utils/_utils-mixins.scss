@use 'sass:math';
@use './utils-functions';
@use './utils-variables';

@mixin focus {
  outline: 3px outset #ffba42;
  @content;
}

@mixin hover {
  @media (hover) {
    &:hover:enabled {
      @content;
    }
  }
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@mixin adaptiveValue(
  $property,
  $fromMaxSize,
  $toMinSize,
  $fromViewportWidthMax: $mockupMaxWidth,
  $maxWidthContainer: 0,
  $toViewportWidthMin: $minViewportWidth
) {
  $containerWidth: $maxWidthContainer + $maxWidthContainerPaddings;

  @if ($fromViewportWidthMax != $containerWidth and $maxWidthContainer > 0) {
    $fromViewportWidthMax: $containerWidth;
  }

  $widthFromBreakpointMax: toEM($fromViewportWidthMax + 0px);
  $widthToBreakpointMin: toEM($toViewportWidthMin + 0px);

  // Floating values formulas
  $slope: math.div(($fromMaxSize - $toMinSize), ($fromViewportWidthMax - $toViewportWidthMin));
  $yIntersection: -$toViewportWidthMin * $slope + $toMinSize;
  $flyValue: #{toREM($yIntersection + 0px)}' + ' #{$slope * 100}vw;

  $propertyValue: #{'clamp(' toREM($toMinSize + 0px) ',' $flyValue ',' toREM($fromMaxSize + 0px) ')'};

  @if $fromViewportWidthMax == $containerWidth or $fromViewportWidthMax == $mockupMaxWidth {
    @media (min-width: $widthFromBreakpointMax) {
      #{$property}: toREM($fromMaxSize + 0px);
    }
  }

  @media (min-width: $widthToBreakpointMin) and (max-width: $widthFromBreakpointMax) {
    #{$property}: $propertyValue;
  }

  @if $toViewportWidthMin == $minViewportWidth {
    @media (max-width: $widthToBreakpointMin) {
      #{$property}: toREM($toMinSize + 0px);
    }
  }
}
